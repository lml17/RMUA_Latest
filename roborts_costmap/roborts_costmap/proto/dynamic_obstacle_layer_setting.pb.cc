// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dynamic_obstacle_layer_setting.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dynamic_obstacle_layer_setting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_costmap {

namespace {

const ::google::protobuf::Descriptor* ParaDynamicObstacleLayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParaDynamicObstacleLayer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dynamic_5fobstacle_5flayer_5fsetting_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_dynamic_5fobstacle_5flayer_5fsetting_2eproto() {
  protobuf_AddDesc_dynamic_5fobstacle_5flayer_5fsetting_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dynamic_obstacle_layer_setting.proto");
  GOOGLE_CHECK(file != NULL);
  ParaDynamicObstacleLayer_descriptor_ = file->message_type(0);
  static const int ParaDynamicObstacleLayer_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, observation_keep_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, expected_update_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, min_obstacle_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, max_obstacle_height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, obstacle_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, raytrace_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, transform_tolerance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, topic_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, sensor_frame_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, obstacle_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, clearing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, marking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, footprint_clearing_enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, is_debug_),
  };
  ParaDynamicObstacleLayer_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ParaDynamicObstacleLayer_descriptor_,
      ParaDynamicObstacleLayer::default_instance_,
      ParaDynamicObstacleLayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, _has_bits_[0]),
      -1,
      -1,
      sizeof(ParaDynamicObstacleLayer),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParaDynamicObstacleLayer, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dynamic_5fobstacle_5flayer_5fsetting_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ParaDynamicObstacleLayer_descriptor_, &ParaDynamicObstacleLayer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dynamic_5fobstacle_5flayer_5fsetting_2eproto() {
  delete ParaDynamicObstacleLayer::default_instance_;
  delete ParaDynamicObstacleLayer_reflection_;
}

void protobuf_AddDesc_dynamic_5fobstacle_5flayer_5fsetting_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_dynamic_5fobstacle_5flayer_5fsetting_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n$dynamic_obstacle_layer_setting.proto\022\017"
    "roborts_costmap\"\372\002\n\030ParaDynamicObstacleL"
    "ayer\022\035\n\025observation_keep_time\030\001 \002(\001\022\034\n\024e"
    "xpected_update_rate\030\002 \002(\001\022\033\n\023min_obstacl"
    "e_height\030\003 \002(\001\022\033\n\023max_obstacle_height\030\004 "
    "\002(\001\022\026\n\016obstacle_range\030\005 \002(\001\022\026\n\016raytrace_"
    "range\030\006 \002(\001\022\033\n\023transform_tolerance\030\007 \002(\001"
    "\022\024\n\014topic_string\030\010 \002(\t\022\024\n\014sensor_frame\030\t"
    " \002(\t\022\025\n\robstacle_size\030\n \002(\002\022\020\n\010clearing\030"
    "\013 \002(\010\022\017\n\007marking\030\014 \002(\010\022\"\n\032footprint_clea"
    "ring_enabled\030\r \002(\010\022\020\n\010is_debug\030\016 \002(\010", 436);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dynamic_obstacle_layer_setting.proto", &protobuf_RegisterTypes);
  ParaDynamicObstacleLayer::default_instance_ = new ParaDynamicObstacleLayer();
  ParaDynamicObstacleLayer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dynamic_5fobstacle_5flayer_5fsetting_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dynamic_5fobstacle_5flayer_5fsetting_2eproto {
  StaticDescriptorInitializer_dynamic_5fobstacle_5flayer_5fsetting_2eproto() {
    protobuf_AddDesc_dynamic_5fobstacle_5flayer_5fsetting_2eproto();
  }
} static_descriptor_initializer_dynamic_5fobstacle_5flayer_5fsetting_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ParaDynamicObstacleLayer::kObservationKeepTimeFieldNumber;
const int ParaDynamicObstacleLayer::kExpectedUpdateRateFieldNumber;
const int ParaDynamicObstacleLayer::kMinObstacleHeightFieldNumber;
const int ParaDynamicObstacleLayer::kMaxObstacleHeightFieldNumber;
const int ParaDynamicObstacleLayer::kObstacleRangeFieldNumber;
const int ParaDynamicObstacleLayer::kRaytraceRangeFieldNumber;
const int ParaDynamicObstacleLayer::kTransformToleranceFieldNumber;
const int ParaDynamicObstacleLayer::kTopicStringFieldNumber;
const int ParaDynamicObstacleLayer::kSensorFrameFieldNumber;
const int ParaDynamicObstacleLayer::kObstacleSizeFieldNumber;
const int ParaDynamicObstacleLayer::kClearingFieldNumber;
const int ParaDynamicObstacleLayer::kMarkingFieldNumber;
const int ParaDynamicObstacleLayer::kFootprintClearingEnabledFieldNumber;
const int ParaDynamicObstacleLayer::kIsDebugFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ParaDynamicObstacleLayer::ParaDynamicObstacleLayer()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_costmap.ParaDynamicObstacleLayer)
}

void ParaDynamicObstacleLayer::InitAsDefaultInstance() {
}

ParaDynamicObstacleLayer::ParaDynamicObstacleLayer(const ParaDynamicObstacleLayer& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_costmap.ParaDynamicObstacleLayer)
}

void ParaDynamicObstacleLayer::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  observation_keep_time_ = 0;
  expected_update_rate_ = 0;
  min_obstacle_height_ = 0;
  max_obstacle_height_ = 0;
  obstacle_range_ = 0;
  raytrace_range_ = 0;
  transform_tolerance_ = 0;
  topic_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_frame_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  obstacle_size_ = 0;
  clearing_ = false;
  marking_ = false;
  footprint_clearing_enabled_ = false;
  is_debug_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParaDynamicObstacleLayer::~ParaDynamicObstacleLayer() {
  // @@protoc_insertion_point(destructor:roborts_costmap.ParaDynamicObstacleLayer)
  SharedDtor();
}

void ParaDynamicObstacleLayer::SharedDtor() {
  topic_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sensor_frame_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void ParaDynamicObstacleLayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParaDynamicObstacleLayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParaDynamicObstacleLayer_descriptor_;
}

const ParaDynamicObstacleLayer& ParaDynamicObstacleLayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dynamic_5fobstacle_5flayer_5fsetting_2eproto();
  return *default_instance_;
}

ParaDynamicObstacleLayer* ParaDynamicObstacleLayer::default_instance_ = NULL;

ParaDynamicObstacleLayer* ParaDynamicObstacleLayer::New(::google::protobuf::Arena* arena) const {
  ParaDynamicObstacleLayer* n = new ParaDynamicObstacleLayer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ParaDynamicObstacleLayer::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_costmap.ParaDynamicObstacleLayer)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ParaDynamicObstacleLayer, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ParaDynamicObstacleLayer*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(observation_keep_time_, transform_tolerance_);
    if (has_topic_string()) {
      topic_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ZR_(obstacle_size_, is_debug_);
    if (has_sensor_frame()) {
      sensor_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ParaDynamicObstacleLayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_costmap.ParaDynamicObstacleLayer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double observation_keep_time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &observation_keep_time_)));
          set_has_observation_keep_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_expected_update_rate;
        break;
      }

      // required double expected_update_rate = 2;
      case 2: {
        if (tag == 17) {
         parse_expected_update_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &expected_update_rate_)));
          set_has_expected_update_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_min_obstacle_height;
        break;
      }

      // required double min_obstacle_height = 3;
      case 3: {
        if (tag == 25) {
         parse_min_obstacle_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_obstacle_height_)));
          set_has_min_obstacle_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_max_obstacle_height;
        break;
      }

      // required double max_obstacle_height = 4;
      case 4: {
        if (tag == 33) {
         parse_max_obstacle_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_obstacle_height_)));
          set_has_max_obstacle_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_obstacle_range;
        break;
      }

      // required double obstacle_range = 5;
      case 5: {
        if (tag == 41) {
         parse_obstacle_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &obstacle_range_)));
          set_has_obstacle_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_raytrace_range;
        break;
      }

      // required double raytrace_range = 6;
      case 6: {
        if (tag == 49) {
         parse_raytrace_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &raytrace_range_)));
          set_has_raytrace_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_transform_tolerance;
        break;
      }

      // required double transform_tolerance = 7;
      case 7: {
        if (tag == 57) {
         parse_transform_tolerance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &transform_tolerance_)));
          set_has_transform_tolerance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_topic_string;
        break;
      }

      // required string topic_string = 8;
      case 8: {
        if (tag == 66) {
         parse_topic_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->topic_string().data(), this->topic_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_costmap.ParaDynamicObstacleLayer.topic_string");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_sensor_frame;
        break;
      }

      // required string sensor_frame = 9;
      case 9: {
        if (tag == 74) {
         parse_sensor_frame:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sensor_frame()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sensor_frame().data(), this->sensor_frame().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_costmap.ParaDynamicObstacleLayer.sensor_frame");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_obstacle_size;
        break;
      }

      // required float obstacle_size = 10;
      case 10: {
        if (tag == 85) {
         parse_obstacle_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obstacle_size_)));
          set_has_obstacle_size();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_clearing;
        break;
      }

      // required bool clearing = 11;
      case 11: {
        if (tag == 88) {
         parse_clearing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clearing_)));
          set_has_clearing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_marking;
        break;
      }

      // required bool marking = 12;
      case 12: {
        if (tag == 96) {
         parse_marking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &marking_)));
          set_has_marking();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_footprint_clearing_enabled;
        break;
      }

      // required bool footprint_clearing_enabled = 13;
      case 13: {
        if (tag == 104) {
         parse_footprint_clearing_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &footprint_clearing_enabled_)));
          set_has_footprint_clearing_enabled();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_is_debug;
        break;
      }

      // required bool is_debug = 14;
      case 14: {
        if (tag == 112) {
         parse_is_debug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_debug_)));
          set_has_is_debug();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_costmap.ParaDynamicObstacleLayer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_costmap.ParaDynamicObstacleLayer)
  return false;
#undef DO_
}

void ParaDynamicObstacleLayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_costmap.ParaDynamicObstacleLayer)
  // required double observation_keep_time = 1;
  if (has_observation_keep_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->observation_keep_time(), output);
  }

  // required double expected_update_rate = 2;
  if (has_expected_update_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->expected_update_rate(), output);
  }

  // required double min_obstacle_height = 3;
  if (has_min_obstacle_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->min_obstacle_height(), output);
  }

  // required double max_obstacle_height = 4;
  if (has_max_obstacle_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->max_obstacle_height(), output);
  }

  // required double obstacle_range = 5;
  if (has_obstacle_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->obstacle_range(), output);
  }

  // required double raytrace_range = 6;
  if (has_raytrace_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->raytrace_range(), output);
  }

  // required double transform_tolerance = 7;
  if (has_transform_tolerance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->transform_tolerance(), output);
  }

  // required string topic_string = 8;
  if (has_topic_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_string().data(), this->topic_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_costmap.ParaDynamicObstacleLayer.topic_string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->topic_string(), output);
  }

  // required string sensor_frame = 9;
  if (has_sensor_frame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_frame().data(), this->sensor_frame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_costmap.ParaDynamicObstacleLayer.sensor_frame");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sensor_frame(), output);
  }

  // required float obstacle_size = 10;
  if (has_obstacle_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->obstacle_size(), output);
  }

  // required bool clearing = 11;
  if (has_clearing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->clearing(), output);
  }

  // required bool marking = 12;
  if (has_marking()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->marking(), output);
  }

  // required bool footprint_clearing_enabled = 13;
  if (has_footprint_clearing_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->footprint_clearing_enabled(), output);
  }

  // required bool is_debug = 14;
  if (has_is_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->is_debug(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_costmap.ParaDynamicObstacleLayer)
}

::google::protobuf::uint8* ParaDynamicObstacleLayer::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_costmap.ParaDynamicObstacleLayer)
  // required double observation_keep_time = 1;
  if (has_observation_keep_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->observation_keep_time(), target);
  }

  // required double expected_update_rate = 2;
  if (has_expected_update_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->expected_update_rate(), target);
  }

  // required double min_obstacle_height = 3;
  if (has_min_obstacle_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->min_obstacle_height(), target);
  }

  // required double max_obstacle_height = 4;
  if (has_max_obstacle_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->max_obstacle_height(), target);
  }

  // required double obstacle_range = 5;
  if (has_obstacle_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->obstacle_range(), target);
  }

  // required double raytrace_range = 6;
  if (has_raytrace_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->raytrace_range(), target);
  }

  // required double transform_tolerance = 7;
  if (has_transform_tolerance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->transform_tolerance(), target);
  }

  // required string topic_string = 8;
  if (has_topic_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->topic_string().data(), this->topic_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_costmap.ParaDynamicObstacleLayer.topic_string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->topic_string(), target);
  }

  // required string sensor_frame = 9;
  if (has_sensor_frame()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sensor_frame().data(), this->sensor_frame().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_costmap.ParaDynamicObstacleLayer.sensor_frame");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sensor_frame(), target);
  }

  // required float obstacle_size = 10;
  if (has_obstacle_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->obstacle_size(), target);
  }

  // required bool clearing = 11;
  if (has_clearing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->clearing(), target);
  }

  // required bool marking = 12;
  if (has_marking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->marking(), target);
  }

  // required bool footprint_clearing_enabled = 13;
  if (has_footprint_clearing_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->footprint_clearing_enabled(), target);
  }

  // required bool is_debug = 14;
  if (has_is_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->is_debug(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_costmap.ParaDynamicObstacleLayer)
  return target;
}

int ParaDynamicObstacleLayer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:roborts_costmap.ParaDynamicObstacleLayer)
  int total_size = 0;

  if (has_observation_keep_time()) {
    // required double observation_keep_time = 1;
    total_size += 1 + 8;
  }

  if (has_expected_update_rate()) {
    // required double expected_update_rate = 2;
    total_size += 1 + 8;
  }

  if (has_min_obstacle_height()) {
    // required double min_obstacle_height = 3;
    total_size += 1 + 8;
  }

  if (has_max_obstacle_height()) {
    // required double max_obstacle_height = 4;
    total_size += 1 + 8;
  }

  if (has_obstacle_range()) {
    // required double obstacle_range = 5;
    total_size += 1 + 8;
  }

  if (has_raytrace_range()) {
    // required double raytrace_range = 6;
    total_size += 1 + 8;
  }

  if (has_transform_tolerance()) {
    // required double transform_tolerance = 7;
    total_size += 1 + 8;
  }

  if (has_topic_string()) {
    // required string topic_string = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_string());
  }

  if (has_sensor_frame()) {
    // required string sensor_frame = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensor_frame());
  }

  if (has_obstacle_size()) {
    // required float obstacle_size = 10;
    total_size += 1 + 4;
  }

  if (has_clearing()) {
    // required bool clearing = 11;
    total_size += 1 + 1;
  }

  if (has_marking()) {
    // required bool marking = 12;
    total_size += 1 + 1;
  }

  if (has_footprint_clearing_enabled()) {
    // required bool footprint_clearing_enabled = 13;
    total_size += 1 + 1;
  }

  if (has_is_debug()) {
    // required bool is_debug = 14;
    total_size += 1 + 1;
  }

  return total_size;
}
int ParaDynamicObstacleLayer::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_costmap.ParaDynamicObstacleLayer)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required double observation_keep_time = 1;
    total_size += 1 + 8;

    // required double expected_update_rate = 2;
    total_size += 1 + 8;

    // required double min_obstacle_height = 3;
    total_size += 1 + 8;

    // required double max_obstacle_height = 4;
    total_size += 1 + 8;

    // required double obstacle_range = 5;
    total_size += 1 + 8;

    // required double raytrace_range = 6;
    total_size += 1 + 8;

    // required double transform_tolerance = 7;
    total_size += 1 + 8;

    // required string topic_string = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_string());

    // required string sensor_frame = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sensor_frame());

    // required float obstacle_size = 10;
    total_size += 1 + 4;

    // required bool clearing = 11;
    total_size += 1 + 1;

    // required bool marking = 12;
    total_size += 1 + 1;

    // required bool footprint_clearing_enabled = 13;
    total_size += 1 + 1;

    // required bool is_debug = 14;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParaDynamicObstacleLayer::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_costmap.ParaDynamicObstacleLayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ParaDynamicObstacleLayer* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ParaDynamicObstacleLayer>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_costmap.ParaDynamicObstacleLayer)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_costmap.ParaDynamicObstacleLayer)
    MergeFrom(*source);
  }
}

void ParaDynamicObstacleLayer::MergeFrom(const ParaDynamicObstacleLayer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_costmap.ParaDynamicObstacleLayer)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_observation_keep_time()) {
      set_observation_keep_time(from.observation_keep_time());
    }
    if (from.has_expected_update_rate()) {
      set_expected_update_rate(from.expected_update_rate());
    }
    if (from.has_min_obstacle_height()) {
      set_min_obstacle_height(from.min_obstacle_height());
    }
    if (from.has_max_obstacle_height()) {
      set_max_obstacle_height(from.max_obstacle_height());
    }
    if (from.has_obstacle_range()) {
      set_obstacle_range(from.obstacle_range());
    }
    if (from.has_raytrace_range()) {
      set_raytrace_range(from.raytrace_range());
    }
    if (from.has_transform_tolerance()) {
      set_transform_tolerance(from.transform_tolerance());
    }
    if (from.has_topic_string()) {
      set_has_topic_string();
      topic_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_string_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sensor_frame()) {
      set_has_sensor_frame();
      sensor_frame_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sensor_frame_);
    }
    if (from.has_obstacle_size()) {
      set_obstacle_size(from.obstacle_size());
    }
    if (from.has_clearing()) {
      set_clearing(from.clearing());
    }
    if (from.has_marking()) {
      set_marking(from.marking());
    }
    if (from.has_footprint_clearing_enabled()) {
      set_footprint_clearing_enabled(from.footprint_clearing_enabled());
    }
    if (from.has_is_debug()) {
      set_is_debug(from.is_debug());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ParaDynamicObstacleLayer::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_costmap.ParaDynamicObstacleLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParaDynamicObstacleLayer::CopyFrom(const ParaDynamicObstacleLayer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_costmap.ParaDynamicObstacleLayer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParaDynamicObstacleLayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void ParaDynamicObstacleLayer::Swap(ParaDynamicObstacleLayer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ParaDynamicObstacleLayer::InternalSwap(ParaDynamicObstacleLayer* other) {
  std::swap(observation_keep_time_, other->observation_keep_time_);
  std::swap(expected_update_rate_, other->expected_update_rate_);
  std::swap(min_obstacle_height_, other->min_obstacle_height_);
  std::swap(max_obstacle_height_, other->max_obstacle_height_);
  std::swap(obstacle_range_, other->obstacle_range_);
  std::swap(raytrace_range_, other->raytrace_range_);
  std::swap(transform_tolerance_, other->transform_tolerance_);
  topic_string_.Swap(&other->topic_string_);
  sensor_frame_.Swap(&other->sensor_frame_);
  std::swap(obstacle_size_, other->obstacle_size_);
  std::swap(clearing_, other->clearing_);
  std::swap(marking_, other->marking_);
  std::swap(footprint_clearing_enabled_, other->footprint_clearing_enabled_);
  std::swap(is_debug_, other->is_debug_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ParaDynamicObstacleLayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParaDynamicObstacleLayer_descriptor_;
  metadata.reflection = ParaDynamicObstacleLayer_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ParaDynamicObstacleLayer

// required double observation_keep_time = 1;
bool ParaDynamicObstacleLayer::has_observation_keep_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ParaDynamicObstacleLayer::set_has_observation_keep_time() {
  _has_bits_[0] |= 0x00000001u;
}
void ParaDynamicObstacleLayer::clear_has_observation_keep_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void ParaDynamicObstacleLayer::clear_observation_keep_time() {
  observation_keep_time_ = 0;
  clear_has_observation_keep_time();
}
 double ParaDynamicObstacleLayer::observation_keep_time() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.observation_keep_time)
  return observation_keep_time_;
}
 void ParaDynamicObstacleLayer::set_observation_keep_time(double value) {
  set_has_observation_keep_time();
  observation_keep_time_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.observation_keep_time)
}

// required double expected_update_rate = 2;
bool ParaDynamicObstacleLayer::has_expected_update_rate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ParaDynamicObstacleLayer::set_has_expected_update_rate() {
  _has_bits_[0] |= 0x00000002u;
}
void ParaDynamicObstacleLayer::clear_has_expected_update_rate() {
  _has_bits_[0] &= ~0x00000002u;
}
void ParaDynamicObstacleLayer::clear_expected_update_rate() {
  expected_update_rate_ = 0;
  clear_has_expected_update_rate();
}
 double ParaDynamicObstacleLayer::expected_update_rate() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.expected_update_rate)
  return expected_update_rate_;
}
 void ParaDynamicObstacleLayer::set_expected_update_rate(double value) {
  set_has_expected_update_rate();
  expected_update_rate_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.expected_update_rate)
}

// required double min_obstacle_height = 3;
bool ParaDynamicObstacleLayer::has_min_obstacle_height() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ParaDynamicObstacleLayer::set_has_min_obstacle_height() {
  _has_bits_[0] |= 0x00000004u;
}
void ParaDynamicObstacleLayer::clear_has_min_obstacle_height() {
  _has_bits_[0] &= ~0x00000004u;
}
void ParaDynamicObstacleLayer::clear_min_obstacle_height() {
  min_obstacle_height_ = 0;
  clear_has_min_obstacle_height();
}
 double ParaDynamicObstacleLayer::min_obstacle_height() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.min_obstacle_height)
  return min_obstacle_height_;
}
 void ParaDynamicObstacleLayer::set_min_obstacle_height(double value) {
  set_has_min_obstacle_height();
  min_obstacle_height_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.min_obstacle_height)
}

// required double max_obstacle_height = 4;
bool ParaDynamicObstacleLayer::has_max_obstacle_height() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ParaDynamicObstacleLayer::set_has_max_obstacle_height() {
  _has_bits_[0] |= 0x00000008u;
}
void ParaDynamicObstacleLayer::clear_has_max_obstacle_height() {
  _has_bits_[0] &= ~0x00000008u;
}
void ParaDynamicObstacleLayer::clear_max_obstacle_height() {
  max_obstacle_height_ = 0;
  clear_has_max_obstacle_height();
}
 double ParaDynamicObstacleLayer::max_obstacle_height() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.max_obstacle_height)
  return max_obstacle_height_;
}
 void ParaDynamicObstacleLayer::set_max_obstacle_height(double value) {
  set_has_max_obstacle_height();
  max_obstacle_height_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.max_obstacle_height)
}

// required double obstacle_range = 5;
bool ParaDynamicObstacleLayer::has_obstacle_range() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ParaDynamicObstacleLayer::set_has_obstacle_range() {
  _has_bits_[0] |= 0x00000010u;
}
void ParaDynamicObstacleLayer::clear_has_obstacle_range() {
  _has_bits_[0] &= ~0x00000010u;
}
void ParaDynamicObstacleLayer::clear_obstacle_range() {
  obstacle_range_ = 0;
  clear_has_obstacle_range();
}
 double ParaDynamicObstacleLayer::obstacle_range() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.obstacle_range)
  return obstacle_range_;
}
 void ParaDynamicObstacleLayer::set_obstacle_range(double value) {
  set_has_obstacle_range();
  obstacle_range_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.obstacle_range)
}

// required double raytrace_range = 6;
bool ParaDynamicObstacleLayer::has_raytrace_range() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ParaDynamicObstacleLayer::set_has_raytrace_range() {
  _has_bits_[0] |= 0x00000020u;
}
void ParaDynamicObstacleLayer::clear_has_raytrace_range() {
  _has_bits_[0] &= ~0x00000020u;
}
void ParaDynamicObstacleLayer::clear_raytrace_range() {
  raytrace_range_ = 0;
  clear_has_raytrace_range();
}
 double ParaDynamicObstacleLayer::raytrace_range() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.raytrace_range)
  return raytrace_range_;
}
 void ParaDynamicObstacleLayer::set_raytrace_range(double value) {
  set_has_raytrace_range();
  raytrace_range_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.raytrace_range)
}

// required double transform_tolerance = 7;
bool ParaDynamicObstacleLayer::has_transform_tolerance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ParaDynamicObstacleLayer::set_has_transform_tolerance() {
  _has_bits_[0] |= 0x00000040u;
}
void ParaDynamicObstacleLayer::clear_has_transform_tolerance() {
  _has_bits_[0] &= ~0x00000040u;
}
void ParaDynamicObstacleLayer::clear_transform_tolerance() {
  transform_tolerance_ = 0;
  clear_has_transform_tolerance();
}
 double ParaDynamicObstacleLayer::transform_tolerance() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.transform_tolerance)
  return transform_tolerance_;
}
 void ParaDynamicObstacleLayer::set_transform_tolerance(double value) {
  set_has_transform_tolerance();
  transform_tolerance_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.transform_tolerance)
}

// required string topic_string = 8;
bool ParaDynamicObstacleLayer::has_topic_string() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ParaDynamicObstacleLayer::set_has_topic_string() {
  _has_bits_[0] |= 0x00000080u;
}
void ParaDynamicObstacleLayer::clear_has_topic_string() {
  _has_bits_[0] &= ~0x00000080u;
}
void ParaDynamicObstacleLayer::clear_topic_string() {
  topic_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_topic_string();
}
 const ::std::string& ParaDynamicObstacleLayer::topic_string() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.topic_string)
  return topic_string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParaDynamicObstacleLayer::set_topic_string(const ::std::string& value) {
  set_has_topic_string();
  topic_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.topic_string)
}
 void ParaDynamicObstacleLayer::set_topic_string(const char* value) {
  set_has_topic_string();
  topic_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_costmap.ParaDynamicObstacleLayer.topic_string)
}
 void ParaDynamicObstacleLayer::set_topic_string(const char* value, size_t size) {
  set_has_topic_string();
  topic_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_costmap.ParaDynamicObstacleLayer.topic_string)
}
 ::std::string* ParaDynamicObstacleLayer::mutable_topic_string() {
  set_has_topic_string();
  // @@protoc_insertion_point(field_mutable:roborts_costmap.ParaDynamicObstacleLayer.topic_string)
  return topic_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ParaDynamicObstacleLayer::release_topic_string() {
  // @@protoc_insertion_point(field_release:roborts_costmap.ParaDynamicObstacleLayer.topic_string)
  clear_has_topic_string();
  return topic_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParaDynamicObstacleLayer::set_allocated_topic_string(::std::string* topic_string) {
  if (topic_string != NULL) {
    set_has_topic_string();
  } else {
    clear_has_topic_string();
  }
  topic_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_string);
  // @@protoc_insertion_point(field_set_allocated:roborts_costmap.ParaDynamicObstacleLayer.topic_string)
}

// required string sensor_frame = 9;
bool ParaDynamicObstacleLayer::has_sensor_frame() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ParaDynamicObstacleLayer::set_has_sensor_frame() {
  _has_bits_[0] |= 0x00000100u;
}
void ParaDynamicObstacleLayer::clear_has_sensor_frame() {
  _has_bits_[0] &= ~0x00000100u;
}
void ParaDynamicObstacleLayer::clear_sensor_frame() {
  sensor_frame_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sensor_frame();
}
 const ::std::string& ParaDynamicObstacleLayer::sensor_frame() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.sensor_frame)
  return sensor_frame_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParaDynamicObstacleLayer::set_sensor_frame(const ::std::string& value) {
  set_has_sensor_frame();
  sensor_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.sensor_frame)
}
 void ParaDynamicObstacleLayer::set_sensor_frame(const char* value) {
  set_has_sensor_frame();
  sensor_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_costmap.ParaDynamicObstacleLayer.sensor_frame)
}
 void ParaDynamicObstacleLayer::set_sensor_frame(const char* value, size_t size) {
  set_has_sensor_frame();
  sensor_frame_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_costmap.ParaDynamicObstacleLayer.sensor_frame)
}
 ::std::string* ParaDynamicObstacleLayer::mutable_sensor_frame() {
  set_has_sensor_frame();
  // @@protoc_insertion_point(field_mutable:roborts_costmap.ParaDynamicObstacleLayer.sensor_frame)
  return sensor_frame_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ParaDynamicObstacleLayer::release_sensor_frame() {
  // @@protoc_insertion_point(field_release:roborts_costmap.ParaDynamicObstacleLayer.sensor_frame)
  clear_has_sensor_frame();
  return sensor_frame_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ParaDynamicObstacleLayer::set_allocated_sensor_frame(::std::string* sensor_frame) {
  if (sensor_frame != NULL) {
    set_has_sensor_frame();
  } else {
    clear_has_sensor_frame();
  }
  sensor_frame_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sensor_frame);
  // @@protoc_insertion_point(field_set_allocated:roborts_costmap.ParaDynamicObstacleLayer.sensor_frame)
}

// required float obstacle_size = 10;
bool ParaDynamicObstacleLayer::has_obstacle_size() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ParaDynamicObstacleLayer::set_has_obstacle_size() {
  _has_bits_[0] |= 0x00000200u;
}
void ParaDynamicObstacleLayer::clear_has_obstacle_size() {
  _has_bits_[0] &= ~0x00000200u;
}
void ParaDynamicObstacleLayer::clear_obstacle_size() {
  obstacle_size_ = 0;
  clear_has_obstacle_size();
}
 float ParaDynamicObstacleLayer::obstacle_size() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.obstacle_size)
  return obstacle_size_;
}
 void ParaDynamicObstacleLayer::set_obstacle_size(float value) {
  set_has_obstacle_size();
  obstacle_size_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.obstacle_size)
}

// required bool clearing = 11;
bool ParaDynamicObstacleLayer::has_clearing() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ParaDynamicObstacleLayer::set_has_clearing() {
  _has_bits_[0] |= 0x00000400u;
}
void ParaDynamicObstacleLayer::clear_has_clearing() {
  _has_bits_[0] &= ~0x00000400u;
}
void ParaDynamicObstacleLayer::clear_clearing() {
  clearing_ = false;
  clear_has_clearing();
}
 bool ParaDynamicObstacleLayer::clearing() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.clearing)
  return clearing_;
}
 void ParaDynamicObstacleLayer::set_clearing(bool value) {
  set_has_clearing();
  clearing_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.clearing)
}

// required bool marking = 12;
bool ParaDynamicObstacleLayer::has_marking() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ParaDynamicObstacleLayer::set_has_marking() {
  _has_bits_[0] |= 0x00000800u;
}
void ParaDynamicObstacleLayer::clear_has_marking() {
  _has_bits_[0] &= ~0x00000800u;
}
void ParaDynamicObstacleLayer::clear_marking() {
  marking_ = false;
  clear_has_marking();
}
 bool ParaDynamicObstacleLayer::marking() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.marking)
  return marking_;
}
 void ParaDynamicObstacleLayer::set_marking(bool value) {
  set_has_marking();
  marking_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.marking)
}

// required bool footprint_clearing_enabled = 13;
bool ParaDynamicObstacleLayer::has_footprint_clearing_enabled() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ParaDynamicObstacleLayer::set_has_footprint_clearing_enabled() {
  _has_bits_[0] |= 0x00001000u;
}
void ParaDynamicObstacleLayer::clear_has_footprint_clearing_enabled() {
  _has_bits_[0] &= ~0x00001000u;
}
void ParaDynamicObstacleLayer::clear_footprint_clearing_enabled() {
  footprint_clearing_enabled_ = false;
  clear_has_footprint_clearing_enabled();
}
 bool ParaDynamicObstacleLayer::footprint_clearing_enabled() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.footprint_clearing_enabled)
  return footprint_clearing_enabled_;
}
 void ParaDynamicObstacleLayer::set_footprint_clearing_enabled(bool value) {
  set_has_footprint_clearing_enabled();
  footprint_clearing_enabled_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.footprint_clearing_enabled)
}

// required bool is_debug = 14;
bool ParaDynamicObstacleLayer::has_is_debug() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ParaDynamicObstacleLayer::set_has_is_debug() {
  _has_bits_[0] |= 0x00002000u;
}
void ParaDynamicObstacleLayer::clear_has_is_debug() {
  _has_bits_[0] &= ~0x00002000u;
}
void ParaDynamicObstacleLayer::clear_is_debug() {
  is_debug_ = false;
  clear_has_is_debug();
}
 bool ParaDynamicObstacleLayer::is_debug() const {
  // @@protoc_insertion_point(field_get:roborts_costmap.ParaDynamicObstacleLayer.is_debug)
  return is_debug_;
}
 void ParaDynamicObstacleLayer::set_is_debug(bool value) {
  set_has_is_debug();
  is_debug_ = value;
  // @@protoc_insertion_point(field_set:roborts_costmap.ParaDynamicObstacleLayer.is_debug)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_costmap

// @@protoc_insertion_point(global_scope)
